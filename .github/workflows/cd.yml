# .github/workflows/cd-promote-dev.yml
name: CD – Promote dev → master

on:
  push:
    branches:
      - dev

permissions:
  contents: write
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check Docker Compose version
        run: docker compose version

      - name: Build & test with Docker Compose
        run: |
          # build et run des services, on arrête dès qu'un container se termine
          docker compose up --build --abort-on-container-exit
          EXIT_CODE=$?
          # cleanup
          docker compose down --volumes --remove-orphans
          # si erreur, on échoue le job
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Docker Compose failed with exit code $EXIT_CODE"
            exit $EXIT_CODE
          fi

  promote:
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v3
        with:
          ref: dev

      - name: Create (or reuse) and merge PR dev → master
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const head = 'dev', base = 'master';
            // cherche une PR ouverte dev→master
            const { data: prs } = await github.rest.pulls.list({ owner, repo, head: `${owner}:${head}`, base, state: 'open' });
            let pr = prs[0];
            if (!pr) {
              const { data } = await github.rest.pulls.create({
                owner, repo, head, base,
                title: 'Automated promotion: dev → master',
                body: 'Cette PR a été générée automatiquement après un build Docker Compose réussi sur la branche dev.'
              });
              pr = data;
            }
            // fusionne la PR
            await github.rest.pulls.merge({ owner, repo, pull_number: pr.number, merge_method: 'merge' });
